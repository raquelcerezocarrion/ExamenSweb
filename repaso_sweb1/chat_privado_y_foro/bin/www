#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('expresslogin:server');
var http = require('http');
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server);

const forumMessages = []; // Mensajes del foro
const privateMessages = {}; // Mensajes de chats privados, organizados por sala
const userRooms = {};

io.on('connection', (socket) => {
  console.log('A user connected');

  // Unirse al foro
  socket.on('joinForum', () => {
    socket.emit('loadForumMessages', forumMessages); // Enviar mensajes previos del foro
  });

  // Enviar mensajes del foro
  socket.on('chat', (msg) => {
    console.log('Mensaje recibido del foro: ', msg);
    forumMessages.push({ username: msg.username, message: msg.message });
    io.emit('forumChat', { username: msg.username, message: msg.message });
  });

  // Unirse a una sala privada
  socket.on('joinPrivateRoom', ({ from, to }) => {
    const room = [from, to].sort().join('_'); // Crear ID Ãºnico para la sala
    if (!userRooms[from]) userRooms[from] = new Set();
    if (!userRooms[to]) userRooms[to] = new Set();

    userRooms[from].add(room);
    userRooms[to].add(room);
    socket.join(room);
    if (!privateMessages[room]) privateMessages[room] = [];
    socket.emit('loadPrivateMessages', privateMessages[room]); // Enviar mensajes previos de la sala
    console.log(`${from} joined private room with ${to}. Sala: ${room}`);
  });

  // Enviar mensajes privados
  socket.on('privateChat', ({ room, message, username }) => {
    if (!userRooms[username] || !userRooms[username].has(room)) {
      console.log(`Usuario no autorizado para enviar mensajes a la sala ${room}`);
      return;
    }

    if (!privateMessages[room]) privateMessages[room] = [];
    privateMessages[room].push({ username, message });
    io.to(room).emit('privateChat', { username, message });
  });

  socket.on('disconnect', () => {
    console.log('A user disconnected');
  });
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
